#! /bin/bash
# vim: ts=4 :

# Halt on error
set -e

declare -a DATAFILES=()

# Read local config file if exist
# Expected vars: TMPDIR RAW_DIR TSV_DIR
[ -e $HOME/.msparometerrc ] && . $HOME/.msparometerrc

TMPDIR=${TMPDIR:-$HOME/tmp}
[ ! -d $TMPDIR ] && mkdir -p $TMPDIR

RAW_DIR=${RAW_DIR:-$PWD}
[ ! -d $RAW_DIR ] && mkdir -p $RAW_DIR

TSV_DIR=${TSV_DIR:-$PWD}
[ ! -d $TSV_DIR ] && mkdir -p $TSV_DIR

TEXT=${DEFAULT_TEXT:-sparometer}

TEMPFILE=$(tempfile --directory=$TMPDIR )
trap "rm -f -- '$TEMPFILE'" EXIT

# Wait for process end and show seconds count down
# Arg1: PID
# Arg2: Expected seconds
# Arg3 (optional): dump file
function waitpid() {
[ -n "$3" ] && touch "$3"
local COUNT=$(( $2*10 ))
while [ -e /proc/$1 ]; do 
	if [ $(( COUNT%10 )) -eq 0 ]; then
		echo -en "\r$(( COUNT/10 )) sec"
		if [ -n "$3" ]; then
			bytes=$( stat --format=%s $3 )
			echo -n " $bytes bytes "
			if [ -n "$4" ]; then
				echo -n "$(( $bytes*100/$4 ))% "
			fi
		fi
	fi
	echo -en ".\e[K"
	sleep 0.1
	[ $COUNT -gt 0 ] && COUNT=$(( COUNT-1 ))
done
echo
}

# Remove '.' dot from number
# Arg1: Floating point number
function float100() {
echo ${1/./}00
}

# Estimate seconds it takes to read data from sparometer
# Arg1: Number of expected records sampled (lines of data)
# If the timing.log file exists, then use
# linear regression (least squares method) to calculate
# the expected seconds to load data.
function estimate_seconds()
{
RECS="$1"
DEFAULT=$(( (RECS*54)/1000+6 ))
if [ ! -e $RAW_DIR/timing.log ]; then
	# If file not exists then default value
	echo $DEFAULT
	exit
fi
declare -a x=()
declare -a y=()
sx=0
sy=0
sxx=0
sxy=0
NR=0
while read; do # data is read at the end of the block (done)
	if [[ "$REPLY" =~ ^logdata[[:blank:]]+([0-9]+)[[:blank:]]+([0-9]+) ]]; then
		X=${BASH_REMATCH[1]}
		Y=${BASH_REMATCH[2]}
		if [ $X -gt 10 ]; then
			# Look only at data where there is more than 10 records of data
			x+=( $X )
			y+=( $Y )
			sx=$(( sx+X ))
			sy=$(( sy+Y ))
			sxx=$(( sxx+X*X ))
			sxy=$(( sxy+X*Y ))
			let NR=NR+1
		fi
	fi
done < $RAW_DIR/timing.log
# >&2 echo Number of linear regression pairs: $NR
if [ $NR -lt 3 ]; then
	# More 3 data pair is needed for linear regression
	echo $DEFAULT
	exit
fi
det=$(( NR*sxx-sx*sx ))
# bash can not cope with floating point, we multiply by 1000
SLOPE=$(( ((NR*sxy-sx*sy)*1000)/det ))
INTERSECT=$(( (-sx*sxy+sxx*sy)/det ))
echo $(( (RECS*SLOPE)/1000+INTERSECT ))
}

# Plot chart of data with gnuplot
# Arg1: TSV file to plot
function plot() {
if [ -z "$( which gnuplot )" ]; then
	>&2 echo Program not installed: gnuplot
	exit
fi
if [[ "$1" =~ ^(.+)/([^.]*)(.+)(\.tsv)$ ]]; then
	#echo "\${BASH_REMATCH[*]}: ${BASH_REMATCH[*]}" ; exit
	DFILE=$1
	FILENAME=${BASH_REMATCH[2]}${BASH_REMATCH[3]}
	PNG=${1%.tsv}.png
else
	>&2 echo "Error, canot parse filename '$1'"
	return 1
fi
cat << EOF | gnuplot
set title "Sparometer ${DFILE##*/}"
set term png size 1000, 500
set timefmt "%H:%M:%S"
set format x "%H:%M"
set output "${PNG}"
set grid x y
set xdata time
set xlabel "Time"
set ylabel "Watt"
set y2label "Watt*Hour"
set ytics nomirror
set y2tics
set tics out
set autoscale y
set autoscale y2
set key right center
set key box
plot "$DFILE" \
	using 3:5 with lines lt 2 lw 2 title "Watt" axes x1y1, \
	'' using 3:8 with lines lt 4 lw 2 title "Watt Hour" axes x1y2
EOF
echo display $PNG
}

# Split logfile into several based on start time.
# Arg1: Filename to split
function splitlogfile() {
RAWFILE=$1
# if offline conversion and $WH is NULL, then take WH from filename.
if [ -z "$WH" ]; then
	[[ $RAWFILE =~ \.([0-9]+)wh\.raw ]] && WH=${BASH_REMATCH[1]}
fi
# If RAWFILE has TEXT in the name, grab it.
[[ $RAWFILE =~ (^|/)([^/]+)\.20[0-9]{2}-[0-9]{2} ]] && TEXT=${BASH_REMATCH[2]}
echo "Reading file: '$RAWFILE'"
while read
do 
	# 1150613064814   00      01      3       1.5     W       11.5    A       12.5    V
	#  YYMMDDHHMMSS
	#                      1         2         3         4         5         6                    7                    8
	if [[ $REPLY =~ ^[0-9]0?([0-9]{1,2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})[[:blank:]]([0-9]+)[[:blank:]]0*([0-9]+) ]]; then
		[ -n "$DEBUG" ] && echo $REPLY \$BASH_REMATCH ${BASH_REMATCH[*]}
		year=$(( 2000+${BASH_REMATCH[1]} ))
		mon=${BASH_REMATCH[2]}
		day=${BASH_REMATCH[3]}
		hour=${BASH_REMATCH[4]}
		min=${BASH_REMATCH[5]}
		sec=${BASH_REMATCH[6]}
		interval=${BASH_REMATCH[8]}
		date=${year}-${mon}-${day}
		time=${hour}:${min}:${sec}
		epoch=$( date -d "$date $time" +%s )
		LOGFILE="$TSV_DIR/${TEXT}.${date}T${time}.${WH}wh.tsv"
		DATAFILES+=($LOGFILE)
		echo -e "Num\tDateTime\tMinute\tWatt\tAmp\tVolt\tWh" > $LOGFILE
		LINE=0
		minute=0
		watthour=0
	else
		# 0001.5  00.021  230
		# 0047.0      00.369  222
		if [[ $REPLY =~ ^0{0,3}([0-9]{1,4}\.[0-9])[[:blank:]]0{0,1}([.0-9]{5,6})[[:blank:]]([0-9]{3}) ]]; then
			[ -n "$DEBUG" ] && echo $REPLY " -- " \$BASH_REMATCH ${BASH_REMATCH[*]}
			watthour=$( echo -e "scale=4 ; $watthour+(${BASH_REMATCH[1]}/(60/$interval))" | bc -l )
			[ ${watthour:0:1} = . ] && watthour=0$watthour
			echo -e "$LINE\t$(date -d @$epoch +%F\ %T)\t$minute\t${BASH_REMATCH[1]}\t${BASH_REMATCH[2]}\t${BASH_REMATCH[3]}\t$watthour" >> $LOGFILE
			epoch=$(( epoch+interval*60 ))
			minute=$(( minute+interval ))
			LINE=$(( LINE+1 ))
		else
			echo -e "ERROR 0007, no regular expression match: '$REPLY'\nWhile reading file '$RAWFILE' at line $LINE."
			exit 1
		fi
	fi
done < $RAWFILE # We read the data file here because 'cat $1 |' does not work with DATAFILES array
for D in ${DATAFILES[*]} ; do
	echo Datafile, lines: $( wc -l $D )
	plot "$D"
done
}

function get_logdata()
{
echo "Getting log-time, interval, text and kwh..."
START=$(date +%s)
stdbuf -oL -eL sparometer --get-{log-time,interval,text,kwh} > $TEMPFILE &
waitpid $! 7 $TEMPFILE
ELAPSED=$(( $(date +%s)-START ))
echo Time elapsed: $ELAPSED
if [ ! -s $TEMPFILE ]; then
	cat <<EOF >&2
	Error, did not get any data from sparometer.
	Check cable connection or power on energy monitor.
	Does the device /dev/ttyXXX exist?
EOF
	exit 1
fi
declare -a STATUS=( $( cat $TEMPFILE ) )
echo "head ${#STATUS[@]} $ELAPSED" >> $RAW_DIR/timing.log

TEXT=${STATUS[2]}
TEXT=${TEXT:-sparometer}

echo "Log-time: ${STATUS[0]}"
echo "Interval: ${STATUS[1]}"
echo "Text: '$TEXT'"
echo "kWh: ${STATUS[3]}"
LOG_TIME=0
INTERVAL=1
KWH="0.0"
[[ ${STATUS[0]} =~ ^0*([0-9]+) ]] && LOG_TIME=${BASH_REMATCH[1]}
[[ ${STATUS[1]} =~ ^0*([0-9]+) ]] && INTERVAL=${BASH_REMATCH[1]}
[[ ${STATUS[3]} =~ ^0*([0-9]+[.][0-9]+) ]] && KWH=${BASH_REMATCH[1]}
WH=${KWH/./}
[[ $WH =~ ^0*([0-9]+) ]] && WH=${BASH_REMATCH[1]}

LINES_EXP=$(( LOG_TIME/(INTERVAL*60) ))
SIZE_EXP=$(( LINES_EXP*18+42 ))
echo Expected data records: $LINES_EXP
echo Expected filesize: $SIZE_EXP

# Estimated time for 'get-logdata': n * 0.06 + 6
DUMP_TIME_EXP=$( estimate_seconds $LINES_EXP )


if [ $LINES_EXP -gt 1 ]; then
	echo "Getting logdata. Wait aprx $DUMP_TIME_EXP seconds to finish."
	LOGFILETEMP=$RAW_DIR/${TEXT}.$( date +%FT%T ).${WH}wh.raw
	while [ ! -s $LOGFILETEMP ]; do
		START=$( date +%s )
		stdbuf -oL -eL sparometer --get-logdata > $LOGFILETEMP &
		waitpid $! $DUMP_TIME_EXP $LOGFILETEMP $SIZE_EXP
		ELAPSED=$(( $(date +%s)-START ))
		echo "Seconds elapsed: $ELAPSED"
		echo "logdata $( wc -l $LOGFILETEMP | cut -d\  -f1 ) $ELAPSED" >> $RAW_DIR/timing.log
	done
	echo "Lines of data: $( wc -l < $LOGFILETEMP )"
	splitlogfile $LOGFILETEMP
fi
}

function show_help()
{
cat << EOF
Help for msparometer.

Options:
	--help
		Show this help

Syntax:
	msparometer [input file]
	msparometer [data.raw|data.tsv]

Example:
	msparometer data.raw

EOF
}

# Parse command line
if [ -z "$1" ]; then
	# no args, read sparometer
	get_logdata
else
	while [ -n "$1" ]; do
		if [ ${1%.raw} != ${1} ]; then
			splitlogfile ${1}
		else
			if [ ${1%.tsv} != ${1} ]; then
				plot $1
			else
				echo "Error, unknown file: '$1'"
			fi
		fi
		if [ "--help" = ${1} ]; then
			show_help
		fi
		shift
	done
fi
